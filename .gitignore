# Agent Academy Labs .gitignore
# Multi-Agent Systems Educational Repository

# === Python ===
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# === UV Package Manager ===
.uv/
uv.lock

# === IDEs and Editors ===
# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/

# VSCode
.vscode/
*.code-workspace

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*~
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# === Operating Systems ===
# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~

# === Agent Academy Labs Specific ===
# Data and outputs
data/private/
data/sensitive/
outputs/
temp/
logs/
*.log

# Agent simulation results
simulation_results/
agent_logs/
performance_data/

# Configuration files with secrets
config/secrets/
.secrets/
*.env.local
*.env.production

# Generated documentation
docs/build/
docs/generated/

# Web interface builds
web/dist/
web/build/
web/static/generated/

# Notebook outputs and checkpoints
notebooks/outputs/
notebooks/.ipynb_checkpoints/

# SPADE agent logs and data
spade_logs/
agent_data/
*.adf

# Mesa simulation outputs
mesa_outputs/
batch_run_data/

# Machine learning models and datasets
models/
datasets/large/
*.pkl
*.joblib
*.h5
*.pt
*.pth

# Performance monitoring
monitoring/data/
metrics/

# === Docker ===
.dockerignore
docker-compose.override.yml

# === Testing ===
.coverage
.pytest_cache/
test-results/
test-outputs/

# === Security ===
# Private keys and certificates
*.pem
*.key
*.crt
*.p12
*.pfx

# API keys and tokens (extra safety)
*api_key*
*secret*
*token*
*password*

# === Temporary files ===
*.tmp
*.temp
*.bak
*.backup
*.orig
*.rej

# === Documentation ===
# Auto-generated API docs
api-docs/generated/

# === Large files (use Git LFS instead) ===
*.zip
*.tar.gz
*.rar
*.7z

# === Project specific ===
# Agent configuration backups
configs/backup/

# Experimental code
experiments/
sandbox/
scratch/

# External dependencies
vendor/
third_party/
